# day-2025-8-5
#创建表 primary key unique not null auto increment default 
 create table if not exists user(
 id bigint unsigned primary key not null auto_increment,
 name varchar(50) unique not null,
 age tinyint not null,
 sex enum('M', 'W') not null)engine=innodb default charset=utf8;
 
CREATE TABLE t_user(
    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    email VARCHAR(50) NOT NULL UNIQUE,
    password CHAR(60) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 windows my.ini
 linux /etc/my.cnf
 
 
 # 插入数据
 insert into user(name, age, sex) values('zhangsan', 20, 'M');
 insert into user(name, age, sex) values('lisi', 18, 'M');
 insert into user(name, age, sex) values('lilei', 21, 'W');
 insert into user(name, age, sex) values('xiaomei', 20, 'W');
 insert into user(name, age, sex) values('wangwu', 17, 'M');
 
 insert into user(name, age, sex) values('zhangsan', 20, 'M'),('lisi', 18, 'M'),('lilei', 21, 'W'),
  ('xiaomei', 20, 'W'),('wangwu', 17, 'M');
 
 #修改
 update user set age = age + 1;
 
 #删除
 delete from user;
 
 # select 查询 回表? 
 select * from user;
 select name,age,sex from user;
 select name,age,sex from user where sex = "M";
 
 #去重 distinct
 select distinct age from user;
 
 
 # limit 分页
 select id, name, age sex from user limit 3;
 select id, name, age sex from user limit 1,3; # 1 表示 offset
 
 # explain 查看sql语句的执行计划
 explain select * from user where name = "zhangsan";
 explain select * from user where age = 20 limit 1;
 
 # 存储过程
 DELIMITER //
CREATE PROCEDURE insert_users(IN num_rows INT)
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE i <= num_rows DO
        INSERT INTO t_user (email, password) 
        VALUES (CONCAT('user', i, '@example.com'), MD5(CONCAT('password', i)));
        SET i = i + 1;
    END WHILE;
END //
DELIMITER ;

-- 调用存储过程插入100,000条数据
CALL insert_users(100000);

#排序 order by 
select *  name from user order by age ;
select name name from user order by name ;

#分组 group by
select sex from user group by sex;
select age,count(age) number from user where age >= 20 group by age;


# 笔试题实践问题
# 统计总笔数和总金额
select count(serno),sum(amount) from bank_bill;

# 按网点和日期统计每个网点每天的营业额，按营业额降序
select amount from bank_bill group by brno，date，amount desc amount;
select brno,data,sum(amount)  as money from bank_bill group by brno,date order by brno,money desc;


# 连接查询
---------------------------------
|		 |	|		  |
|	左	 | 内	|	右	  |
|		 |	|		  |
---------------------------------

# 内连接查询
student: uid  name  age  sex
cource:  cid  cname  credit
example: uid  cid  time  score
create table student(
uid int unsigned primary key not null auto_increment,
name varchar(50) not null,
age tinyint unsigned not null,
sex enum("M", "W") not null);

create table cource(
cid int unsigned primary key not null auto_increment,
cname varchar(50) not null,
credit tinyint unsigned not null);

create table example(
uid int unsigned  not null,
cid  int unsigned not null,
time date not null,
score float  not null,
primary key(uid,cid)
);

select a.uid, a.name,a.age,a.sex from student as a where a.uid = 1;
select c.score from example as c where c.uid = 1 and c.cid = 2; 
select a.uid, a.name,a.age ,a.sex, c.score from student a inner join example c on a.uid = c.uid where c.uid = 1 and c.cid = 2;

select b.cid,b.cname,b.credit from cource b where b.cid=2;

select a.uid, a.name,a.age ,a.sex,b.cid,b.cname,b.credit, c.score from example c
 inner join student a on c.uid = a.uid
inner join cource b on c.cid=b.cid
where c.uid=1 and c.cid=2;

select b.cid,b.cname,b.credit, count(*) cnt from example c
inner join cource b on b.cid = c.cid
where c.score>=80
group by c.cid
order by cnt;

 explain select a.id,a.email,a.password from t_user a inner join(
 select id from t_user limit 90000,10)b on a.id=b.id;

# 外连接查询
# 左连接查询
select a.*,b.* from student a left join example b on a.uid=b.uid;
# 没参加考试的同学
select * from student where uid not in(select distinct uid from example);

select a.* from student a left join example b on a.uid=b.uid where b.cid is null;

select a.* from student a left join example b on  a.uid = b.uid and b.cid=3 where b.cid is null;

# 右连接查询
 select a.*,b.* from student a right join example b on a.uid=b.uid;




























