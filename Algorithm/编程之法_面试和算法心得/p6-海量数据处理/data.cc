#include <iostream>

using namespace std;
// 第六章 海量数据处理

// 2024-8-25
// 6.1 基础知识 : STL 容器 hash_set、set、multi_set、map、multi_map、 hash_map.
// 6.2 散列分治 问题分析: Top IP, 一般策略 "分而治之/ 散列映射 + hash_map  + 堆"
// 6.3 多层划分
// 6.4 MapReduce  分解合并 原理归并排序
// 6.5 外排序  排序 + 归并
// 6.6 位图
// 6.7 布隆过滤器 Bloom filter
// 6.8 Trie树
// 6.9 数据库 数据库为什么不用散列索引而用 B 树索引？

// 顺序性和范围查询：

// B树索引：支持顺序访问和范围查询。由于B树节点中的键值是按顺序存储的,因此可以轻松地进行范围查询（例如查找某个范围内的所有记录）以及排序操作。
// 散列索引：则主要用于精确匹配查询,因为它通过计算键值的散列值直接定位数据。但散列索引不支持顺序访问,也不适合范围查询或排序操作。

// 空间利用率：

// B树索引：节点内的记录是按顺序存储的,可以有效利用节点的空间。B树能够保持平衡,避免了因数据插入或删除导致的节点过度分裂或合并。
// 散列索引：可能会出现散列冲突（即多个键值映射到相同的散列桶）,这需要额外的机制来解决冲突,如链地址法或开放定址法,这可能会导致空间浪费或效率降低。

// 稳定性能：

// B树索引：在最坏情况下,查找、插入、删除操作的时间复杂度为O(log n),且性能相对稳定,不会因数据分布而显著波动。
// 散列索引：虽然在理想情况下查找的时间复杂度为O(1),但由于散列冲突,实际性能可能会波动,尤其是在负载因子较高或键值分布不均的情况下。

// 多功能性：

// B树索引：适用于多种查询场景,包括等值查询、范围查询、前缀匹配等。因此,它在OLTP（在线事务处理）系统中更为通用。
// 散列索引：适用于等值查询,但在处理其他类型的查询时,功能相对有限。

// 事务和并发控制：

// B树索引：在数据库系统中,B树的结构有助于在事务并发环境中保持一致性和完整性。B树结构的节点分裂和合并操作可以通过数据库锁机制进行良好的控制。
// 散列索引：由于其直接映射特性,处理并发访问和冲突时,可能需要复杂的锁定或重新散列机制。

// 6.10 倒序索引
// 6.11 simhash 

int main()
{

    return 0;
}